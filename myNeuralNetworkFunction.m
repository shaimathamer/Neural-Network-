function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-May-2019 12:02:16.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx8 matrix, input #1
% and returns:
%   y = Qx6 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.302117;-0.34586;0;-0.302117;-0.34586;0;0;0];
x1_step1.gain = [0.535743895131347;0.477642737561586;0.4;0.535743895131347;0.477642737561586;0.4;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.88013000405661179;-1.807189766336857;0.93498317598637293;1.2118082338109541;0.81796396827406692;1.3124443926436684;1.2848879671026241;-0.18199479107559496;-0.72395327245881202;2.5655639351097506];
IW1_1 = [1.460377481425376 2.6210643485233858 -0.37866325538255136 1.3208035322341778 1.9827410390530489 -0.44659340934123826 -3.6434014144687765 -2.1205989240289727;0.54703137541951297 0.089968426319059783 0.63433462749464731 -1.6354846120653075 -3.6382493196109107 -1.5576446332028917 -0.098758078948406075 2.6381719932151086;-1.0622434673459238 -2.0591412857950657 -0.014273147430519904 1.0542619049560897 1.9771016039434179 0.23675629339643486 1.1148597050449585 -1.0985120918970688;-1.8999345877855651 0.15478593597027479 0.22938624843889988 1.9478583073680047 -0.13139267518741685 -0.35391491962117894 0.65770275292072911 1.5154628381505937;-1.872615235001271 1.5964306814256577 -0.71913689610700604 -2.2099258737710987 1.1813929053991201 -0.35341763729196735 -3.1514817693959629 0.9581343238322505;-0.08228228058007106 -0.84799715054085922 -2.1872571307570778 0.11437621079916903 1.0550302259694391 2.0214000168345776 -0.3275350783279698 2.7779871839822885;2.0467618988280409 -2.6078776639516614 -0.32226925834544978 2.2011891618716048 -2.342511930877933 -0.0641974447673576 -0.23778840412887192 -3.2233034890605441;0.99030214618755008 -1.927117528311056 0.21456589152401129 -0.92297393273761941 1.94655001832603 -0.38241458907994169 2.0248882797571048 -1.3215859477431637;-1.6519809328708397 -1.8066720551936215 -0.70621106362420283 -1.6549297810175356 -2.104976007151822 -0.56237094971115231 -0.17416832461866519 -4.1372904502056134;-0.36062877812133082 -1.6177358517603391 2.6500395365587952 0.39467180869996699 -1.0154565992450926 1.2067463726938317 -1.6087835032486701 0.17861684378369971];

% Layer 2
b2 = [-0.48371626361391162;-0.25140807553638539;0.32244038440588602;-1.36989727916041;0.17803480175631126];
LW2_1 = [0.56104071289932167 -0.27827675946293823 3.2231192152970571 -4.3668859084653953 0.44516098164838674 -3.4985564613261007 0.15630012692550496 -3.6229961169535825 -1.6645381566610464 0.81516645907539798;4.7975371631221906 -1.1657873423689964 -2.6643325318180024 1.7999532257235784 1.7890783239726451 -1.1381119569176004 2.0624479578537085 1.9293256885430159 1.5384967450254086 2.184080363790561;-1.8887847127094335 1.7444056640490258 -3.156955330816317 0.42330904292374133 0.30814918286307863 1.3333643620211217 -1.4713126228103564 -1.7512299270394962 -2.0637968192058924 0.67895851651927419;0.32846063954245991 -2.2230804892392211 -0.76636341163306432 2.5687962013655716 -2.0176030374026901 -0.76215705024274705 0.54792483221561872 0.89606855551593867 -0.61512741711591823 -4.035431076759477;-3.698296882107766 2.5263048351559645 1.5576314420869741 0.074039111717680295 -2.3609998515698871 1.093662602850465 0.035318586468362959 2.6498203761623089 1.4371293280617927 -0.28465193692600066];

% Output 1
y1_step1.xrows = 6;
y1_step1.keep = [1 2 4 5 6];
y1_step1.remove = 3;
y1_step1.constants = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = removeconstantrows_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Remove Constants Output Reverse-Processing Function
function x = removeconstantrows_reverse(y,settings)
Q = size(y,2);
x = nan(settings.xrows,Q,'like',y);
x(settings.keep,:) = y;
x(settings.remove,:) = repmat(settings.constants,1,Q);
end
